1.) A library is made up of modules, which hold the core meaning of library. The main factor while naming a module is the role that the module is going to play. Moreover, the modules when they are split into header and implementation file should be given the exact same name to keep the record of your file. To give an example, the core module of our assignment is given the name as core.h and core.c which contains the input validation part, whereas on the other side the module for the clinic management are clinic.h and clinic.c. This not only saves our time but also increases the readability as going through everything in a split program is better than going through everything contained in a single program.

2.)  The reason for dealing with two modules is the first module which is "core" is used to accept inputs from the user and validate the input with the conditions provided, whereas the other module which is the "clinic" module handles the application of clinic patient management where the user can view, search, edit, add, and even remove the patient from record. Therefore, clinic module deals with all the actions entered by the user whereas core handles the validation of all the inputs entered by the same user. They are not used together as creating functions in core module provide us an independent choice to call the functions where required in the clinic module.  

3.) The reason for splitting up the modules into two files (header and implementation) is that the header files are defined to declare all the method functions and data whereas the implementation file, as the name suggests, is defined to implement, and define the functions we declare in the header file. To cite an example from the current application, we have created two headers as well as two implementation files for now, where “core.h” and “clinic.h” has all the method functions declared whereas the same functions are properly defined in their respective implementation file(.c). hence, this helps us to keep a track of all the functions without manually looking and searching for it in the implementation file.
