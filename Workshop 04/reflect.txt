*****************************************************************************
                               Reflection
                             Workshop - #4
Full Name  : Vishwam Shailesh Kapadia
Student ID#: 154933212

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

1.) Selection is an extremely important concept in programming as it provides a choice of compiling a certain output. It determines the choice based on the information provided, the program runs as per the choice selected and it selects the path which follows the option chose. It basically presents itself as a decision which when made follows the correct path of that decision and then execute the program. To keep it in nutshell, selection can be used when there can be multiple outcomes asking the same question which depends on the user input.
For example,
"if (applesPicked > nApples)
            {
                printf("You picked too many... only %d more APPLE(S) are needed.\n", nApples);
            }
            else if (applesPicked <= 0)
            {
                printf("ERROR: You must pick at least 1!\n");
            }"
The above example of mine show that if user enters the amount of apple to be picked greater than his/her original selection for apples then the program will show that "You picked too many......" as the amount was greater than to be picked whereas if the user enters less than 0 which is not possible as he needs to pick up exactly as the amount he entered first so the program will prompt an ERROR. This "if-else-if" part is a selection which determines the output according to choice.

Let's take another similar example:- In contiunation of above example....
"else if (pearsPicked > 0 && nPears > pearsPicked)
            {
                printf("Looks like we still need some PEARS...\n");
                nPears -= pearsPicked;
            }
            else
            {
                printf("Great, that's the pears done!\n\n");
                nPears -= pearsPicked;
            } "

This again shows two different outputs based on the same user input if the pickup amount is still less than the original amount then it will prompt the user that he/she needs to pick up more whereas if the amount matches then the pickup process is completed.

And to give one more example, let's see the whole selection part of any other fruit such as for oranges,

"if (orangesPicked > nOranges)
            {
                printf("You picked too many... only %d more ORANGE(S) are needed.\n", nPears);
            }
            else if (orangesPicked <= 0)
            {
                printf("ERROR: You must pick at least 1!\n");
            }
            else if (orangesPicked > 0 && nOranges > orangesPicked)
            {
                printf("Looks like we still need some ORANGES...\n");
                nOranges -= orangesPicked;
            }
            else
            {
                printf("Great, that's the oranges done!\n\n");
                nOranges -= orangesPicked;
            }"

This all examples includes the selection concept of programming.


2.) A nested construct is a construction which includes a logic inside the same type of logic. For example, if I use an "if" statement inside an "if" statement then it will be considered as nesting.To give example from my program let us witness two different types of nesting.
a.) do
        {

            printf("How many APPLES do you need? : ");
            scanf("%d", &nApples);
            if (nApples < 0)
            {
                printf("ERROR: Value must be 0 or more.\n");
            }
        }while(nApples < 0);
Now in this I have created an if logic inside a do-while loop which is considered as nesting. Moreover, lets take another example
b.) while (nApples > 0)
        {
            printf("Pick some APPLES... how many did you pick? : ");
            scanf("%d", &applesPicked);

            if (applesPicked > nApples)
            {
                printf("You picked too many... only %d more APPLE(S) are needed.\n", nApples);
            }
            else if (applesPicked <= 0)
            {
                printf("ERROR: You must pick at least 1!\n");
            }
            else if (applesPicked > 0 && nApples > applesPicked)
            {
                printf("Looks like we still need some APPLES...\n");
                nApples -= applesPicked;
            }
            else
            {
                printf("Great, that's the apples done!\n\n");
                nApples -= applesPicked;
            }
        }
Whereas, in this while loop construct I have done a statements of if-else construction which is again a nesting.
To say it in a non-technical way lets start from the beggining of loop where at the very first we check that are the apples to be taken are more than 0 and so we constructed a condition checking logic there and started an iteration. Now if apples to be taken are more than 0 then we will go inside the loop, after getting in we take the amount of apples the individual picked and then we will again construct a conditon checking statement and that's what nesting actually is. So, we check another condition inside a condition checking logic and so on. This is what nesting means which basically is a construct inside a construct itself.


3.) My favourite iteration is "while" loop as it checks the condition at the very first moment and then proceed so the loop don't get executed when the condition is false, wheras in "do-while" loops, the loop gets executed for atleast 1 time before getting to check the condition, do-while loops are very useful when you have to take inputs from the user though. Whereas in "for" loop we need to initialize the looping variable then check the condition and then change the looping variable to by applying increment or decrement to it. So if seen from a bird view "while" loops are the most simple types of loop which just requires a condition to check and on doing so it executes the logic written inside it. In our program we wanted to make sure that the user doesn't get the interface of picking up the fruits when the selected amount of something is 0 so we constructed a while loop for that part so on the very start of loop we check the condition that if a particular fruit is selected as 0 in amount then we won't run the picking up process of it and that's the main reason I like while loops as I stated earlier too.

The example of such happening is let's assume that we have to check that if pears are selected 0 we will eliminate the picking up part for pears so it goes like...
while (nPears > 0)
        {
            printf("Pick some PEARS... how many did you pick? : ");
            scanf("%d", &pearsPicked);

            if (pearsPicked > nPears)
            {
                printf("You picked too many... only %d more PEAR(S) are needed.\n", nPears);
            }
            else if (pearsPicked <= 0)
            {
                printf("ERROR: You must pick at least 1!\n");
            }
            else if (pearsPicked > 0 && nPears > pearsPicked)
            {
                printf("Looks like we still need some PEARS...\n");
                nPears -= pearsPicked;
            }
            else
            {
                printf("Great, that's the pears done!\n\n");
                nPears -= pearsPicked;
            }

So the logic part inside the while loop will only get executed when the pears selected are more than 0. Whereas if we did the same thing with do while loop then no matter what the amount of pears are the loop will execute atleast once and compile the pickup process for a fruit even if it is not to be picked at all. This is where while loops works most efficiently.






	
